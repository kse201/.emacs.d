* UI
** Theme
#+begin_src emacs-lisp
  (use-package dracula-theme)
#+end_src
** dashboard
#+begin_src emacs-lisp
  (use-package dashboard
      :diminish
      (dashboard-mode page-break-lines-mode)
      :custom
      (dashboard-startup-banner 3)
      (dashboard-items '((recents . 15)
		 (projects . 5)
		 (bookmarks . 5)
		 (agenda)))
      :hook
      (after-init . dashboard-setup-startup-hook)
      :config
      (setq inhibit-startup-screen t))
#+end_src
** Tab
#+begin_src emacs-lisp
  (use-package tabbar
    :config
    (tabbar-mode))
#+end_src
** Window
#+begin_src emacs-lisp
  (use-package hydra)
  (use-package ace-window :ensure hydra
    :functions hydra-frame-window/body
    :bind
    ("C-M-o" . hydra-frame-window/body)
    :custom
    (aw-keys '(?j ?k ?l ?i ?o ?h ?y ?u ?p))
    :custom-face
    (aw-leading-char-face ((t (:height 4.0 :foreground "#f1fa8c")))))
#+end_src
** IDE Like Tag list
#+begin_src emacs-lisp
    (use-package imenu-list
      :bind
      ("<f11>" . imenu-list-smart-toggle)
      :custom
      (imenu-list-focus-after-activation t)
      (imenu-list-auto-resize nil))
#+end_src
** IDE Like File Tree
#+begin_src emacs-lisp
  (use-package neotree
    :after projectile
    :commands (neotree-show neotree-hide neotree-dir neotree-find)
    :custom
    (neo-theme 'nerd2)
    (projectile-switch-project-action 'neotree-projectile-action)
    :init
    (defun neotree-project-dir ()
      "Open NeoTree using the git root."
      (interactive)
      (let ((project-dir (projectile-project-root))
            (file-name (buffer-file-name)))
        (neotree-toggle)
        (if project-dir
            (if (neo-global--window-exists-p)
                (progn
                  (neotree-dir project-dir)
                  (neotree-find file-name)))
          (message "Could not find git project root."))))
    :bind
    ("<f10>" . neotree-projectile-action)
    ("C-c C-p" . neotree-project-dir)
    )
#+end_src
** rainbow indent
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :config
    :hook
      ((prog-mode yaml-mode) . highlight-indent-guides-mode)
      :custom
      (highlight-indent-guides-auto-enabled t)
      (highlight-indent-guides-responsive t)
      (highlight-indent-guides-method 'character))
#+end_src
** paren
*** rainbow delimiters
 #+begin_src emacs-lisp
   (use-package rainbow-delimiters
     :hook
     (prog-mode . rainbow-delimiters-mode))
 #+end_src
*** colorise
#+begin_src emacs-lisp
  (use-package paren
    :ensure nil
    :hook
    (after-init . show-paren-mode)
    :custom
    (show-paren-style 'mixed)
    (show-paren-when-point-inside-paren t)
    (show-paren-when-point-in-periphery t)
    :config
    (show-paren-mode 1))

#+end_src
** modeline
*** modeline customize
#+begin_src emacs-lisp
  (use-package powerline :disabled
    :config
    (powerline-center-theme))

  (use-package telephone-line
    :config
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
        telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
        telephone-line-primary-right-separator 'telephone-line-cubed-right
        telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right)
  (setq telephone-line-height 24
        telephone-line-evil-use-short-tag t)
    (telephone-line-mode 1)
    )
#+end_src
*** dont show unneccesary window
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :hook
    ((imenu-list-minor-mode minimap-mode) . hide-mode-line-mode))
#+end_src
** minimap
#+begin_src emacs-lisp
  (use-package minimap :disabled t
    :commands
    (minimap-bufname minimap-create minimap-kill)
    :custom
    (minimap-major-modes '(prog-mode))

    (minimap-window-location 'right)
    (minimap-update-delay 0.2)
    (minimap-minimum-width 20)
    :bind
    ("C-c m" . ladicle/toggle-minimap)
    )
#+end_src
** ido (Interactive Do)
#+begin_src emacs-lisp
  (ido-mode 1)
  (ido-everywhere 1)
#+end_src

** others
*** show limit line
#+begin_src emacs-lisp
  (use-package fill-column-indicator
    :hook
    ((markdown-mode
      python-mode
      git-commit-mode) . fci-mode))
#+end_src
others
  #+begin_src emacs-lisp
      (setq scroll-preserve-screen-position nil)
      (setq next-screen-context-lines 1)
      ;; Scroll window on a line-by-line basis
      (setq scroll-conservatively 1000)
      (setq scroll-step 1)
      (setq scroll-margin 0) ; default=0
      (setq yank-excluded-properties t)
      (transient-mark-mode 1)

      (setq frame-title-format "%f")
      (global-linum-mode 0)
      (setq linum-format "%2d")
      (setq linum-delay t)
      (defadvice linum-schedule (around my-linum-schedule () activate)
        (run-with-idle-timer 0.2 nil #'linum-update-current))
      (setq-default tab-width 4)
      (setq-default indent-tabs-mode nil)

      (size-indication-mode t)

      (setq-default show-trailing-whitespace t)
      (set-face-background 'trailing-whitespace "#b14770")

      (defface hlline-face
        '((((class color)
        (background dark))
           (:background "dark slate gray"))
          (((class color)
        (background light))
           (:background  "#98FB98"))
          (t
           ()))
        "*Face used by hl-line.")
      (setq hl-line-face 'hlline-face)

      (display-time)
      (column-number-mode t)
      (line-number-mode t)
      (blink-cursor-mode 1)
      (transient-mark-mode 1)
      (set-scroll-bar-mode 'right); GUI emacs
      (which-function-mode 1)

      (auto-image-file-mode t)
#+end_src
*** show line mode
#+begin_src emacs-lisp
  (global-linum-mode t)
#+end_src
*** beacon
#+begin_src emacs-lisp
 (use-package beacon
    :custom
    (beacon-color "yellow")
    :config
    (beacon-mode 1))
#+end_src
*** etc
#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (scroll-bar-mode 1)
  (menu-bar-mode 1)
#+end_src

show line number
#+begin_src emacs-lisp
(use-package hlinum)
#+end_src
** Font
#+begin_src emacs-lisp
  (let ((ws window-system))
    (cond ((eq system-type 'windows-nt)
           (set-face-attribute 'default nil
                               :family "Cica"
                               :height 120)
           (set-fontset-font nil 'japanese-jisx0208 (font-spec :family "Cica" :size 18)))
          ((eq system-type 'ns)
           (set-face-attribute 'default nil
                               :family "Cica"
                               :height 100)
           (set-fontset-font nil 'japanese-jisx0208 (font-spec :family "Cica")))
          ( t
            (set-face-attribute 'default nil
                                :family "Cica"
                                :height 140)
            (set-fontset-font nil 'japanese-jisx0208 (font-spec :family "Cica")))))
#+end_src
