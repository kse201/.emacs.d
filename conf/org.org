#+TITLE: org config
#+STARTUP: content

* Org-mode
** keybind
#+begin_src emacs-lisp
  (define-key global-map "\C-cc" 'org-capture)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ci" 'my:org-goto-inbox)

  (defun open-org ()
    "open org-directory"
    (interactive)
    (find-file org-directory))

  (defun my:org-goto-inbox ()
    "open inbox.org"
    (interactive)
    (find-file (concat org-directory "/inbox.org")))
#+end_src
** file path
#+begin_src emacs-lisp
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
#+end_src
** snippet
#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist
        '(("l" . "src emacs-lisp")
          ("s" . "src")
          ("q" . "quote")
          ("a" . "export ascii")
          ("c" . "center")
          ("C" . "comment")
          ("e" . "example")
          ("E" . "export")
          ("h" . "export html")
          ("v" . "verse")))
#+end_src
** org-agenda command
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(
          ("I"
           "Inbox"
           (;;
            (todo "NEW")
            ))
          ("m"
           "All memo entry"
           (;;
            (todo "MEMO")
            ))
          ("k"
           "\uf05a Knowledge Base"
           (;;
            (todo "KB")
            ))
          ))
#+end_src
** org templates
#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("i"
           "Inbox"
           entry
           (file+headline
            (lambda ()(expand-file-name "inbox.org" org-directory))
            "Inbox")
           "* NEW %?")
          ("t"
           "New Task"
           entry
           (file+headline
            (lambda ()(expand-file-name "todo.org" org-directory))
            "Tasks")
           "* NEW %?\n\n")
          ("m"
           "Memo"
           entry
           (file+headline
            (lambda () (expand-file-name "memo.org" org-directory))
            "Memo")
           "* MEMO %U%?\n%i\n%a"
           )
          ("k"
           "Knowledge base"
           entry
           (file+headline
            (lambda () (expand-file-name "knowledge.org" org-directory))
            "Knowledge base")
           "* MEMO %U%?\n%i\n%a"
           )
          ("s"
           "New Schedule"
           entry
           (file+headline
            (lambda () (expand-file-name "schedule.org" org-directory))
            "Schedule")
           "* %?\n  SCHEDULED: %(org-insert-time-stamp (org-read-date nil t) nil nil nil nil)"
           )
          )
        )
#+end_src
** show todo in agenda
#+begin_src emacs-lisp
  (setq org-agenda-files (list org-directory))
#+end_src
** org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :unless (eq system-type 'windows-nt)
    :hook (org-mode . org-bullets-mode))
#+end_src
** Open diary file
#+begin_src emacs-lisp
  (defun today-diary nil
    "Open diary file"
    (interactive)
    (setq today-diary (expand-file-name (format-time-string "../%Y/%m/%Y-%m-%d-diary.org" (current-time)) org-directory))
    (find-file today-diary))
#+end_src
** report table format
#+begin_src emacs-lisp
(defun my-org-clocktable-indent-string (level)
  (if (= level 1) ""
    (let ((str " "))
      (while (> level 2)
        (setq level (1- level)
              str (concat str "--")))
      (concat str "-> "))))

(advice-add 'org-clocktable-indent-string :override #'my-org-clocktable-indent-string)
#+end_src

** tag list
   #+begin_src emacs-lisp
     (setq org-tag-alist '(("meeting" . ?m)
                           ("develop" . ?o)
                           ("document" . ?d)))

   #+end_src
** color customize
#+begin_src emacs-lisp
 (setq org-agenda-current-time-string "← now")
#+end_src
** org-babel

#+begin_src emacs-lisp
  (org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)
    (org . t)
    (js . t)
    ))
#+end_src

** org-jounal config

   前回書いた日記を見るには ~C-c C-b~ 、検索は ~C-c C-s~。
   ~calenter~ 上で ~C-j~ でその日のjounal を開ける。
   ~org-capture~ と連携させてentry を追加する。

    #+begin_src emacs-lisp
      (use-package org-journal
        :custom
        (org-journal-dir (expand-file-name "jounal" org-directory))
        (org-journal-file-format "%Y/%m/%Y-%m-%d-diary.org")
        (org-journal-date-format "%Y/%m/%d")
        :config

        (defun org-journal-find-location ()
          (org-journal-new-entry t)
          (goto-char (point-min)))

        (add-to-list 'org-capture-templates
                     '("j" "Journal entry" entry
                       (function org-journal-find-location)
                       "* %(format-time-string org-journal-time-format)%^{Title}\n%i%?")))
    #+end_src

** others
*** show DONE timestamp
#+begin_src
  (setq org-log-done 'time)
#+end_src
*** todo keywords

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "NEW(n)"
                    "InProgress(p)"
                    "|"
                    "Wait(w)"
                    "DONE(d)"
                    "SOMEDAY(s)")
          (type "MEMO(m)")
          (type "KB(k)")))
#+end_src

#+begin_src emacs-lisp
  (setq org-hide-leading-stars t)
  (setq org-pretty-entities t)
#+end_src

*** use Github Flaver Markdown
#+begin_src emacs-lisp
  (use-package ox-gfm)
#+end_src
